{"ast":null,"code":"var _jsxFileName = \"/home/arif/Documents/arif/wedding/client/src/components/Carousel.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport dayjs from \"dayjs\";\nimport wishesPaper from \"../assets/images/wishesPaper.jpg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar relativeTime = require(\"dayjs/plugin/relativeTime\");\n\ndayjs.extend(relativeTime);\n\nconst Carousel = ({\n  wishes\n}) => {\n  _s();\n\n  // We will start by storing the index of the current image in the state.\n  const [currentImage, setCurrentImage] = React.useState(0); // We are using react ref to 'tag' each of the images. Below will create an array of\n  // objects with numbered keys. We will use those numbers (i) later to access a ref of a\n  // specific image in this array.\n\n  const refs = wishes === null || wishes === void 0 ? void 0 : wishes.reduce((acc, val, i) => {\n    acc[i] = /*#__PURE__*/React.createRef();\n    return acc;\n  }, {});\n\n  const scrollToImage = i => {\n    // First let's set the index of the image we want to see next\n    setCurrentImage(i); // Now, this is where the magic happens. We 'tagged' each one of the images with a ref,\n    // we can then use built-in scrollIntoView API to do eaxactly what it says on the box - scroll it into\n    // your current view! To do so we pass an index of the image, which is then use to identify our current\n    // image's ref in 'refs' array above.\n\n    refs[i].current.scrollIntoView({\n      //     Defines the transition animation.\n      behavior: \"smooth\",\n      //      Defines vertical alignment.\n      block: \"nearest\",\n      //      Defines horizontal alignment.\n      inline: \"start\"\n    });\n  }; // Some validation for checking the array length could be added if needed\n\n\n  const totalImages = wishes === null || wishes === void 0 ? void 0 : wishes.length; // Below functions will assure that after last image we'll scroll back to the start,\n  // or another way round - first to last in previousImage method.\n\n  const nextImage = () => {\n    if (currentImage >= totalImages - 1) {\n      scrollToImage(0);\n    } else {\n      scrollToImage(currentImage + 1);\n    }\n  };\n\n  const previousImage = () => {\n    if (currentImage === 0) {\n      scrollToImage(totalImages - 1);\n    } else {\n      scrollToImage(currentImage - 1);\n    }\n  }; // Tailwind styles. Most importantly notice position absolute, this will sit relative to the carousel's outer div.\n\n\n  const arrowStyle = \"absolute text-white text-2xl z-10 bg-yellow-600 h-10 w-10 rounded-full opacity-30 flex items-center justify-center hover:opacity-75 focus:opacity-75 focus:ring-yellow-600\"; // Let's create dynamic buttons. It can be either left or right. Using\n  // isLeft boolean we can determine which side we'll be rendering our button\n  // as well as change its position and content.\n\n  const sliderControl = isLeft => /*#__PURE__*/_jsxDEV(\"button\", {\n    type: \"button\",\n    onClick: isLeft ? previousImage : nextImage,\n    className: `${arrowStyle} ${isLeft ? \"left-2\" : \"right-2\"}`,\n    style: {\n      top: \"40%\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"span\", {\n      role: \"img\",\n      \"aria-label\": `Arrow ${isLeft ? \"left\" : \"right\"}`,\n      children: isLeft ? \"◀\" : \"▶\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"px-3 flex justify-center w-screen items-center\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"relative w-full\",\n      children: [sliderControl(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"carousel w-full\",\n        children: [sliderControl(true), wishes === null || wishes === void 0 ? void 0 : wishes.map((value, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-full flex-shrink-0 text-center sm:py-7 sm:px-16 md:py-8 md:px-16 lg:py-10 lg:px-20 xl:py-12 xl:px-24 2xl:py-14  font-alef relative flex flex-col justify-between\",\n          ref: refs[i],\n          style: {\n            backgroundImage: `url(${wishesPaper})`,\n            backgroundRepeat: \"no-repeat\",\n            backgroundPosition: \"center\",\n            height: \"20rem\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-xl\",\n            children: value === null || value === void 0 ? void 0 : value.post\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"w-full flex flex-col justify-center text-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"font-Sacramento text-1.875xl\",\n              children: [\"- \", value === null || value === void 0 ? void 0 : value.name, \" -\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: dayjs(value === null || value === void 0 ? void 0 : value.createdAt).fromNow()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Carousel, \"cnc9rbhP80fTHOrqNEzwhjBY+h0=\");\n\n_c = Carousel;\nexport default Carousel;\n\nvar _c;\n\n$RefreshReg$(_c, \"Carousel\");","map":{"version":3,"sources":["/home/arif/Documents/arif/wedding/client/src/components/Carousel.jsx"],"names":["React","useEffect","dayjs","wishesPaper","relativeTime","require","extend","Carousel","wishes","currentImage","setCurrentImage","useState","refs","reduce","acc","val","i","createRef","scrollToImage","current","scrollIntoView","behavior","block","inline","totalImages","length","nextImage","previousImage","arrowStyle","sliderControl","isLeft","top","map","value","backgroundImage","backgroundRepeat","backgroundPosition","height","post","name","createdAt","fromNow"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport dayjs from \"dayjs\";\nimport wishesPaper from \"../assets/images/wishesPaper.jpg\";\nvar relativeTime = require(\"dayjs/plugin/relativeTime\");\ndayjs.extend(relativeTime);\n\nconst Carousel = ({ wishes }) => {\n  // We will start by storing the index of the current image in the state.\n  const [currentImage, setCurrentImage] = React.useState(0);\n\n  // We are using react ref to 'tag' each of the images. Below will create an array of\n  // objects with numbered keys. We will use those numbers (i) later to access a ref of a\n  // specific image in this array.\n  const refs = wishes?.reduce((acc, val, i) => {\n    acc[i] = React.createRef();\n    return acc;\n  }, {});\n\n  const scrollToImage = (i) => {\n    // First let's set the index of the image we want to see next\n    setCurrentImage(i);\n    // Now, this is where the magic happens. We 'tagged' each one of the images with a ref,\n    // we can then use built-in scrollIntoView API to do eaxactly what it says on the box - scroll it into\n    // your current view! To do so we pass an index of the image, which is then use to identify our current\n    // image's ref in 'refs' array above.\n    refs[i].current.scrollIntoView({\n      //     Defines the transition animation.\n      behavior: \"smooth\",\n      //      Defines vertical alignment.\n      block: \"nearest\",\n      //      Defines horizontal alignment.\n      inline: \"start\",\n    });\n  };\n\n  // Some validation for checking the array length could be added if needed\n  const totalImages = wishes?.length;\n\n  // Below functions will assure that after last image we'll scroll back to the start,\n  // or another way round - first to last in previousImage method.\n  const nextImage = () => {\n    if (currentImage >= totalImages - 1) {\n      scrollToImage(0);\n    } else {\n      scrollToImage(currentImage + 1);\n    }\n  };\n\n  const previousImage = () => {\n    if (currentImage === 0) {\n      scrollToImage(totalImages - 1);\n    } else {\n      scrollToImage(currentImage - 1);\n    }\n  };\n\n  // Tailwind styles. Most importantly notice position absolute, this will sit relative to the carousel's outer div.\n  const arrowStyle =\n    \"absolute text-white text-2xl z-10 bg-yellow-600 h-10 w-10 rounded-full opacity-30 flex items-center justify-center hover:opacity-75 focus:opacity-75 focus:ring-yellow-600\";\n\n  // Let's create dynamic buttons. It can be either left or right. Using\n  // isLeft boolean we can determine which side we'll be rendering our button\n  // as well as change its position and content.\n  const sliderControl = (isLeft) => (\n    <button\n      type=\"button\"\n      onClick={isLeft ? previousImage : nextImage}\n      className={`${arrowStyle} ${isLeft ? \"left-2\" : \"right-2\"}`}\n      style={{ top: \"40%\" }}\n    >\n      <span role=\"img\" aria-label={`Arrow ${isLeft ? \"left\" : \"right\"}`}>\n        {isLeft ? \"◀\" : \"▶\"}\n      </span>\n    </button>\n  );\n  return (\n    <div className=\"px-3 flex justify-center w-screen items-center\">\n      <div className=\"relative w-full\">\n        {sliderControl()}\n        <div className=\"carousel w-full\">\n          {sliderControl(true)}\n          {wishes?.map((value, i) => (\n            <div\n              className=\"w-full flex-shrink-0 text-center sm:py-7 sm:px-16 md:py-8 md:px-16 lg:py-10 lg:px-20 xl:py-12 xl:px-24 2xl:py-14  font-alef relative flex flex-col justify-between\"\n              key={i}\n              ref={refs[i]}\n              style={{\n                backgroundImage: `url(${wishesPaper})`,\n                backgroundRepeat: \"no-repeat\",\n                backgroundPosition: \"center\",\n                height: \"20rem\",\n              }}\n            >\n              <p className=\"text-xl\">{value?.post}</p>\n              <div className=\"w-full flex flex-col justify-center text-center\">\n                <p className=\"font-Sacramento text-1.875xl\">\n                  - {value?.name} -\n                </p>\n                <p>{dayjs(value?.createdAt).fromNow()}</p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n"]},"metadata":{},"sourceType":"module"}